<style lang="less" scoped>
  @import '../../css/app.less';
  .layout {
    background: #2a363b;
    .match-name {
      position: relative;
      z-index: 999;
      background: #3eaca8;
      color: white;
      width: @maxWidth;
      font-size: @mainTitle; // box-shadow: 1px 1px 5px black;
      text-align: center;
      padding: 8rpx 0 8rpx 0;
    }
  }
  .player-name-layout {
    height: 135rpx;
    display: flex;
    .player-win {
      .displayCenter(@align-items: flex-end);
      font-size: @secondTitle;
      color: white;
      flex: 1;
      span {
        margin-left: 10rpx;
      }
    }
  }
  .button-doubel-layout {
    width: 19.5%;
  } // 得分选项
  .Score-button-layout {
    display: flex;
    margin-top: 75rpx;
    .Score-button-box {
      height: 270rpx;
      color: white;
      flex: 1;
      .displayCenter(@justify-content: space-between);
      flex-direction: column;
    }
  }
  .attack,
  .defense,
  .counterattack {
    font-size: @text;
    padding: 6px;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
  }
  .attack:active,
  .defense:active,
  .counterattack:active,
  {
    box-shadow: unset;
  }
  .player-name-input {
    text-align: center;
  }
</style>

<template>
  <view class="layout">
    <!-- 比赛信息 -->
    <view class="match-name">Game</view>
    <view class="player-name-layout">
      <view class="player-win">
        <input type="text" value="{{red.name}}" class="player-name-input" bindblur="inputRedName" />
      </view>
      <view class="button-doubel-layout"></view>
      <view class="player-win">
        <input type="text" value="{{green.name}}" class="player-name-input" bindblur="inputGreenName" />
      </view>
    </view>
    <!-- 分数组件 -->
    <Scoring :redScore.sync="redScore" :greenScore.sync="greenScore" :switchBoolean.sync="switchBoolean"></Scoring>
    <!-- 得分选项 -->
    <view class="Score-button-layout">
      <view class="Score-button-box">
        <view class="attack" @tap.stop="attackPoint('red')">进攻得分 +1</view>
        <view class="defense" @tap.stop="defensePoint('red')">防守得分 +1</view>
        <view class="counterattack" @tap.stop="counterattackPoint('red')">防守反击得分 +1</view>
      </view>
      <view class="button-doubel-layout"> </view>
      <view class="Score-button-box">
        <view class="attack" @tap.stop="attackPoint('green')">进攻得分 +1</view>
        <view class="defense" @tap.stop="defensePoint('green')">防守得分 +1</view>
        <view class="counterattack" @tap.stop="counterattackPoint('green')">防守反击得分 +1</view>
      </view>
    </view>
    <!-- 罚牌组件 -->
    <ColorBlock> </ColorBlock>
    <setUp></setUp>
    <van-dialog show="{{ showReport }}" title="提示" message="是否查看赛后报表" show-cancel-button bind:confirm="showReport" bind:cancel="dontShowReport">
    </van-dialog>
    <Dividing></Dividing>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Dividing from '../../components/Dividing'
  import Scoring from './components/scoring'
  import ColorBlock from './components/colorBlock'
  import setUp from './components/setUp'
  export default class score extends wepy.page {
    config = {
      navigationBarTitleText: '裁判器',
      usingComponents: {
        'van-button': '/components/vant-weapp/button/index',
        'van-popup': '/components/vant-weapp/popup/index',
        'van-switch-cell': '/components/vant-weapp/switch-cell/index',
        'van-radio': '/components/vant-weapp/radio/index',
        'van-radio-group': '/components/vant-weapp/radio-group/index',
        'van-cell': '/components/vant-weapp/cell/index',
        'van-cell-group': '/components/vant-weapp/cell-group/index',
        'van-dialog': '/components/vant-weapp/dialog/index'
      }
    };
    components = {
      Dividing,
      Scoring,
      ColorBlock,
      setUp
    };
    data = {
      // 赛后分析弹出层：
      showReport: false,
      // Double按钮开关
      switchBoolean: true,
      // 需要获胜的分数
      winScore: 5,
      // 得分情况
      redScore: 0,
      greenScore: 0,
      // 获胜方
      winner: '',
      // 红方罚牌/得分统计
      red: {},
      // 绿方罚牌/得分统计
      green: {}
    };
    methods = {
      inputRedName(e) {
        this.red.name = e.detail.value
      },
      inputGreenName(e) {
        this.green.name = e.detail.value
      },
      // 得分函数
      attackPoint(player) {
        (player === 'red') ? this.redScore++ : this.greenScore++
        (player === 'red') ? this.red.attack++ : this.green.attack++
      },
      defensePoint(player) {
        (player === 'red') ? this.redScore++ : this.greenScore++
        (player === 'red') ? this.red.defense++ : this.green.defense++
      },
      counterattackPoint(player) {
        (player === 'red') ? this.redScore++ : this.greenScore++
        (player === 'red') ? this.red.counterattack++ : this.green.counterattack++
      },
      // 显示赛后报表
      showReport() {
        let win = this.winner
        let winScore = this.winScore
        let red = {
          ...this.red,
          redScore: this.redScore
        }
        // console.log(red)
        let green = {
          ...this.green,
          greenScore: this.greenScore
        }
        // 传值
        this.$preload('red', red)
        this.$preload('green', green)
        this.$preload('win', win)
        this.$preload('winScore', winScore)
        this.$navigate('./gameReport/gameReport')
        this.showReport = false
      },
      // 不显示赛后报表
      dontShowReport() {
        wepy.showToast({
          title: '取消',
          icon: 'none',
          duration: 1000
        })
        this.showReport = false
      }
    };
    computed = {};
    // 子组件触发的方法
    events = {
      // 点击Double
      DoubleTap() {
        // 下次点击双方都达到获胜分时，点击无效
        if (this.redScore + 1 === this.winScore && this.greenScore + 1 === this.winScore) {
          return false
        } else {
          this.redScore++
          this.greenScore++
        }
      },
      // 点击弹出框选择罚牌给
      penalTo(whoColor, cColor) {
        if (whoColor === 'red') { // 给红方
          if (cColor === 'yellow') { // 黄牌
            if (this.red.yellow === 1) {
              this.greenScore++
              this.red.yellow = 0
            } else {
              this.red.yellow = 1
            }
          } else if (cColor === 'red') { // 红牌
            this.greenScore++
            this.red.red++
          } else { // 黑牌
            this.red.black = 1
            this.winner = 'green'
          }
        } else { // 给绿方
          if (cColor === 'yellow') { // 黄牌
            if (this.green.yellow === 1) {
              this.redScore++
              this.green.yellow = 0
            } else {
              this.green.yellow = 1
            }
          } else if (cColor === 'red') { // 红牌
            this.redScore++
            this.green.red++
          } else { // 黑牌
            this.green.black = 1
            this.winner = 'red'
          }
        }
      },
      // 显示Double开关改变
      switchOnChange(boolean) {
        if (boolean) {
          this.switchBoolean = true
        } else {
          this.switchBoolean = false
        }
      },
      // 分制改变
      radioOnClick(scoringSystem) {
        if (scoringSystem === '1') {
          this.winScore = 5
        } else {
          this.winScore = 15
        }
      },
      // 刷新重置
      refreshClick() {
        this.redScore = 0
        this.greenScore = 0
        this.winner = ''
        this.red = {
          name: '红方',
          score: 0,
          yellow: 0,
          red: 0,
          black: 0,
          attack: 0,
          defense: 0,
          counterattack: 0
        }
        this.green = {
          name: '绿方',
          score: 0,
          yellow: 0,
          red: 0,
          black: 0,
          attack: 0,
          defense: 0,
          counterattack: 0
        }
      }
    };
    watch = {
      redScore(newValue, oldValue) { // 监听红方分数  注释同greenScore
        // 达到获胜分时获胜
        if (newValue === this.winScore) {
          this.winner = 'red'
        }
        // 黑牌时双方分数不动
        if (this.red.black === 1 || this.green.black === 1) {
          this.redScore = newValue - 1
        }
        // 分数大于获胜分时，分数不动
        if (this.winner !== '') {
          if (this.redScore > this.winScore || this.greenScore >= this.winScore) {
            this.redScore = newValue - 1
          }
        }
      },
      greenScore(newValue, oldValue) {
        if (newValue === this.winScore) {
          this.winner = 'green'
        }
        if (this.red.black === 1 || this.green.black === 1) {
          this.greenScore = newValue - 1
        }
        if (this.winner !== '') {
          if (this.redScore >= this.winScore || this.greenScore > this.winScore) {
            this.greenScore = newValue - 1
          }
        }
      },
      winner(newValue, oldValue) {
        if (this.winner !== '') {
          this.showReport = true
          this.$apply()
        }
      }
    }
    onShow() {
      // 初始化值
      this.winner = ''
      this.redScore = 0
      this.greenScore = 0
      this.red = {
        name: '红方',
        yellow: 0,
        red: 0,
        black: 0,
        attack: 0,
        defense: 0,
        counterattack: 0
      }
      this.green = {
        name: '绿方',
        yellow: 0,
        red: 0,
        black: 0,
        attack: 0,
        defense: 0,
        counterattack: 0
      }
    }
    onLoad() {}
  }
</script>
